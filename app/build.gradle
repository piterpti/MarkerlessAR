import org.apache.tools.ant.taskdefs.condition.Os
import com.android.build.gradle.tasks.NdkCompile

apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "pl.piterpti.cba.pl"
        minSdkVersion 10
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
        ndk {moduleName "NativeCode"}
    }

    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set .so files location to libs
        jni.srcDirs = [] //Disable automatic ndk-build call
    }

    tasks.withType(NdkCompile) {
        compileTask -> compileTask.enabled = false
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    /*
    task ndkBuild(type: Exec) {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            def ndkDir = System.getenv("ANDROID_NDK_ROOT")
            commandLine 'cmd', '/C', "$ndkDir/ndk-build",
                    'NDK_PROJECT_PATH=build',
                    'APP_BUILD_SCRIPT=sc/main/jni/Android.mk',
                    'NDK_APPLICATION_MK=src/main/jni/Application.mk',
                    'NDK_APP_LIBS_OUT = src/main/jnilibs'

        } else {
            //commandLine "ndk-build", '-C', file('src/main').absolutePath
            def ndkDir = System.getenv("NDKROOT")
            commandLine "$ndkDir/ndk-build",
                    'NDK_PROJECT_PATH=build',
                    'APP_BUILD_SCRIPT=src/main/jni/Android.mk',
                    'NDK_APPLICATION_MK=src/main/jni/Application.mk',
                    'NDK_APP_LIBS_OUT = src/main/jnilibs'
        }
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
    */
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.0.0'
    compile project(':opencv')
}
